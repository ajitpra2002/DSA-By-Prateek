package V1;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Vector;

/*
 * Given an array containing n integers and an number s denoting a target sum of two element
 * Find the distinct integer that can pair sum is equal to target .assume there will be only a pair.
 *  arr={10,5,2,-6,9,11}
 *  s=4
 *  o/p=[10,-6]
 */
public class Pair04 {
	/*
	 * sol
	 * 1.Brute force O(n^2)
	 * 2.sorting then binary search-O(nlogn)
	 * 3.using data structure that is Hashset O(n)--otimal solution
	 */
	
	public static void main(String[] args) {
		int arr[]={10,5,2,3,-6,9,11};
		int target=4;//{2,3,5,9,10,11}
		System.out.println(findpair2(arr, target));
	}
	public static Vector<Integer> findpair2(int arr[],int target){
		Arrays.sort(arr);
		System.out.println(Arrays.toString(arr));
		Vector<Integer> v=new Vector<Integer>();
		int start=0;
		int end=arr.length-1;
		while(start<end) {
			if(target<arr[start]+arr[end]) {
				System.out.println(start);
				end--;
			}
			else if(target>arr[start]+arr[end]) {
				System.out.println("by");
				start++;
			}
			else if(target==arr[start]+arr[end]) {
				System.out.println("nahi");
				v.add(arr[start]);
				v.add(arr[end]);
			}
		}
		return v;
	}
	public static Vector<Integer> findSum(int arr[],int target){
		HashSet<Integer> set=new HashSet<Integer>();
		Vector<Integer> v=new Vector<Integer>();
		for(int i=0;i<arr.length;i++) {
			int x=target-arr[i];
			if(set.contains(x)) {
				v.add(x);
				v.add(arr[i]);
				return v;
			}
			set.add(arr[i]);
		}
		return null;
	}
	

}
