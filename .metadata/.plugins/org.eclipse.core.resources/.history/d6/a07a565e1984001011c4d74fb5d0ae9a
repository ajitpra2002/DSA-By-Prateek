package V1;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

public class LongestBand07 {

	public static void main(String[] args) {
//		int arr[]= {1,9,3,0,18,5,2,4,10,7,12,6};
//		System.out.println(findLongestBand3(arr));
//		int arr[] = {100, 4, 200, 1, 3, 2};
//		System.out.println(findLongestBand2(arr));
//		int arr[] = {10, 5, 30, 20};
//		System.out.println(findLongestBand2(arr));
//		int arr[] = {1, 2, 2, 3};  // duplicates included
//		System.out.println(findLongestBand2(arr));
		int arr[] = {};
		System.out.println(findLongestBand3(arr));
//		int arr[] = {7};
//		System.out.println(findLongestBand3(arr));





	}
	
//	using brute force O(n^2)
	public static Integer findLongestBand(int arr[]) {
		for(int i=0;i<arr.length;i++) {
			for(int j=0;j<arr.length;j++) {
				int LongestContaingingConsecutivecount=0;
				if(arr[i]=arr[j]+1) {
					
				}
			}
		}
		
	}
	//using shorting O(nlogn)
	public static Integer findLongestBand1(int arr[]) {
		
		
	}
//	using Data Structure O(n)
	public static Integer findLongestBand2(int arr[]) {
		Arrays.sort(arr);
		int count=1;
		int largest=0;
		for(int i=0;i<arr.length-1;i++)
		{
			if(arr[i]==arr[i+1]-1) {
				 count++;
			}
			else {
				largest=Math.max(largest, count);
				count=0;
			}
		}
		return largest;
		
	}
	//otimal solution using hashset Data Structure
	public static Integer findLongestBand3(int arr[]) {	
		Set<Integer> s=new HashSet<Integer>();
		int largest=0;
		for(int i=0;i<arr.length;i++) {
			s.add(arr[i]);
		}
		for(int i=0;i<arr.length;i++) {
			int k=arr[i];
			if(!s.contains(k-1)) {
				int count=1;
				while(s.contains(k+1)) {
					count++;
					k++;
				}
				largest=Math.max(largest, count);
			}
		}
		return largest;
	}
	/*
	 * Time Complexity:
Inserting into HashSet â†’ O(n)
Outer loop runs O(n)
Inner while loop runs at most O(n) overall (since each element is processed once across all bands)
ðŸ‘‰ Overall = O(n) average time.
	 */
}
