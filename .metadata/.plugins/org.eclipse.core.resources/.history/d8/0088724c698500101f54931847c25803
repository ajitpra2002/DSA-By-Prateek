package V1;

import java.util.Arrays;
import java.util.Vector;

public class SubArraySort9 {

	public static void main(String[] args) {
		int arr[] = { 1, 2, 3,4,5,8,6,7,9,10 };
		System.out.println(SubArraySort1(arr));
	}
	//it will take O(nlogn) due to sorting
	//and Sc=o(n) due to copy the element in new arrays
	public static Vector<Integer> SubArraySort(int arr[]) {
		int arr1[] = Arrays.copyOf(arr, arr.length);
		Arrays.sort(arr1);
		Vector<Integer> c = new Vector<Integer>();
		int start = -1;
		int end = -1;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] != arr1[i]) {
				if (start == -1) {
					start = i;
				}
				end = i;
			}
		}
		c.add(start);
		c.add(end);
		return c;
	}
	public static Vector<Integer> SubArraySort1(int arr[]) {
		int smallest=0;
		int largest=0;
		int startIndex=-1;
		int endindext=-1;
		Vector<Integer> c= new Vector<Integer>();
		for(int i=1;i<arr.length-1;i++)
		{
			if(arr[i-1]>arr[i]&& arr[i]<arr[i+1]) {
				smallest=arr[i];
			}
		}
		for(int i=arr.length-2;i>0;i--)
		{
			System.out.println("hi");
			if(arr[i-1]<arr[i] && arr[i]>arr[i+1]) {
				largest=arr[i];
			}
		}
		for(int i=0;i<arr.length;i++)
		{
			if(smallest>arr[i] && smallest<arr[i+1])
			{
				startIndex=i+1;
			}
			
		}
		for(int i=arr.length-1;i>0;i--)
		{
			if(largest<arr[i] && largest>arr[i+1]) {
				 endindext=i-1;
			}
		}
		c.add(startIndex);
		c.add(endindext);
		return c;
	}
}
